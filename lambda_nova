import boto3
import logging
import pandas as pd
from datetime import datetime
import io
import os

logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Inicializar clientes S3 e SES
s3_client = boto3.client('s3')
ses_client = boto3.client('ses')

# Configuração da tabela e do S3
DATABASE = "cia"
TABLE_NAME = "tbciar_tr_ses_teste"
DOCUMENTS_S3_PATH = "s3://cielo-sdlf-dev-sa-east-1-445989609784-raw/cia/documentos-ses"
PARQUET_S3_PATH = "s3://cielo-sdlf-dev-sa-east-1-445989609784-raw/cia/tbciar_tr_ses_teste"

def get_s3_attachment(bucket, file_key):
    """
    Obter um arquivo específico do S3 como anexo.
    """
    try:
        logger.info(f"Obtendo anexo do S3: bucket={bucket}, file_key={file_key}")
        file_obj = s3_client.get_object(Bucket=bucket, Key=file_key)
        attachment = {
            'Name': os.path.basename(file_key),
            'Data': file_obj['Body'].read(),
            'Type': file_key.split('.')[-1]
        }
        return attachment
    except Exception as e:
        logger.error(f"Erro ao obter o anexo do S3: {e}")
        return None

def send_email(sender_email, email_destinatario, subject, body, attachment=None, is_html=False):
    """
    Função para enviar e-mails via AWS SES com suporte a HTML e anexos.
    """
    try:
        from email.mime.multipart import MIMEMultipart
        from email.mime.text import MIMEText
        from email.mime.base import MIMEBase
        from email import encoders

        # Criar a mensagem
        msg = MIMEMultipart()
        msg['Subject'] = subject
        msg['From'] = sender_email
        msg['To'] = email_destinatario

        # Adicionar o corpo do e-mail
        msg.attach(MIMEText(body, 'html' if is_html else 'plain'))

        # Adicionar anexo, se existir
        if attachment:
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(attachment['Data'])
            encoders.encode_base64(part)
            part.add_header('Content-Disposition', f"attachment; filename={attachment['Name']}")
            msg.attach(part)

        # Enviar o e-mail
        logger.info(f"Enviando e-mail para {email_destinatario} com o assunto: {subject}")
        ses_client.send_raw_email(
            Source=sender_email,
            Destinations=[email_destinatario],
            RawMessage={'Data': msg.as_string()}
        )

        return None  # Nenhum erro ocorreu

    except Exception as e:
        logger.error(f"Erro ao enviar o e-mail: {e}")
        return str(e)  # Retorna a mensagem de erro

def lambda_handler(event, context):
    """
    Função Lambda para gravar dados no formato Parquet no Athena e S3 e enviar e-mails via SES.
    """
    try:
        logger.info("Iniciando processamento da Lambda.")

        # Verificar se o remetente do e-mail foi enviado
        if 'sender_email' not in event:
            logger.error("Parâmetro 'sender_email' é obrigatório.")
            return {"statusCode": 400, "message": "Parâmetro 'sender_email' é obrigatório."}

        sender_email = event['sender_email']

        # Obter os dados do evento
        if 'data' not in event:
            logger.error("Parâmetro 'data' é obrigatório.")
            return {"statusCode": 400, "message": "Parâmetro 'data' é obrigatório."}

        data = event['data']

        # Validar os campos obrigatórios
        required_fields = ["email_destinatario", "id_retorno", "mensagem_enviada", "anexo"]
        for record in data:
            if not all(field in record for field in required_fields):
                logger.error(f"Campos obrigatórios ausentes em um registro: {record}")
                return {"statusCode": 400, "message": f"Todos os campos {required_fields} são obrigatórios."}

        # Processar cada registro e enviar e-mails
        for record in data:
            record["data_envio"] = datetime.now().isoformat()

            email_destinatario = record["email_destinatario"]
            subject = f"Notificação - ID de Retorno: {record['id_retorno']}"
            body = record["mensagem_enviada"]

            # Obter anexo do S3
            anexo_nome = record["anexo"]
            bucket, prefix = DOCUMENTS_S3_PATH.replace("s3://", "").split("/", 1)
            file_key = f"{prefix}/{anexo_nome}"
            attachment = get_s3_attachment(bucket, file_key)

            # Tentar enviar o e-mail
            error_message = send_email(sender_email, email_destinatario, subject, body, attachment=attachment, is_html=True)

            # Registrar erro ou sucesso
            record["mensagem_erro"] = error_message if error_message else ""

        # Criar DataFrame com os dados processados
        df = pd.DataFrame(data)

        # Gerar o nome do arquivo Parquet
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        file_name = f"data_{timestamp}.parquet"
        parquet_path = f"{PARQUET_S3_PATH}/{file_name}"

        # Salvar o DataFrame como Parquet
        parquet_buffer = io.BytesIO()
        df.to_parquet(parquet_buffer, index=False)
        s3_client.put_object(Bucket=PARQUET_S3_PATH.split('/')[2], Key=f"{PARQUET_S3_PATH.split('/', 3)[-1]}/{file_name}", Body=parquet_buffer.getvalue())

        logger.info(f"Dados salvos no S3: {parquet_path}")

        return {
            "statusCode": 200,
            "message": "Dados processados e e-mails enviados com sucesso.",
            "parquet_file": parquet_path
        }

    except Exception as e:
        logger.error(f"Erro durante o processamento: {e}")
        return {
            "statusCode": 500,
            "message": str(e)
        }
